import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import net.minecraftforge.gradle.common.util.RunConfig
import net.minecraftforge.gradle.userdev.tasks.RenameJarInPlace

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

tasks.named('wrapper', Wrapper).configure {
    //Define wrapper values here so as to not have to always do so when updating gradlew.properties
    gradleVersion = '7.5.1'
    distributionType = Wrapper.DistributionType.ALL
}

defaultTasks 'build'

idea {
    module {
        //Exclude directories from being managed
        for (String excludeDirName in ["run", "runGameTests", "out", "logs", "gradle"]) {
            excludeDirs.add(new File(projectDir, excludeDirName))
        }
    }
}
ext {
    versionProperties = [
            "version": mod_version, "mc_version": minecraft_version_range, "forge_version": forge_version_range
    ]
    packProperties = [
            "pack_format": Math.max(Integer.parseInt(resource_pack_format), Integer.parseInt(data_pack_format)),
            "resource_pack_format": resource_pack_format, "data_pack_format": data_pack_format
    ]
    jsonPatterns = ["**/*.json", "**/*.mcmeta"]
    secondaryModules = []
    extraTypes = ['datagen', 'gameTest']
}

repositories {
    mavenCentral()
    maven {
        name 'prog'
        url 'https://dvs1.progwml6.com/files/maven'
        content {
            includeGroup 'mezz.jei'
        }
    }
    maven {
        name 'Modmaven'
        url 'https://modmaven.dev/'
        content {
            includeGroup 'mcjty.theoneprobe'
        }
    }

    whenObjectAdded {
        //ForgeGradle adds these in an afterEvaluate, so we need to catch them as they're added and exclude mod artifacts/groups
        if (it instanceof MavenArtifactRepository) {
            def url = it.url.toString()
            if (url == 'https://maven.minecraftforge.net/' || url == 'https://libraries.minecraft.net/' || url == 'https://repo.maven.apache.org/maven2/') {
                try {
                    it.content {
                        excludeGroup 'mezz.jei'
                        excludeGroup 'mcjty.theoneprobe'
                    }
                    println("Adding exclusions to ${url}")
                } catch (Exception ignored) {
                    //oh well
                }
            }
        }
    }
}

test {
    useJUnitPlatform()
}

sourceSets {
    api {
        //The API has no resources
        resources.srcDirs = []
    }
    main {
        resources {
            include '**/**'
            // copy everything else, but blender and bbmodel files.
            exclude '**/*.blend'
            exclude '**/*.bbmodel'
            //Add the generated main module resources, as well as those generated by the annotation processor
            srcDirs += ['src/datagen/generated/magitek']
            //But exclude the cache of the generated data from what gets built
            exclude '.cache'
        }
        compileClasspath += api.output
        runtimeClasspath += api.output
    }
}

//Add all extra source sets that the main sourceSet should have
setupExtraSourceSets(sourceSets.main)

configurations {
    //Make sure all our sub source set stuff extends the proper base methods so that
    // they can see all the dependencies we have in dependencies including forge
    extendConfigurations(implementation, apiImplementation, testImplementation)
    extendConfigurations(compileOnly, apiCompileOnly, testCompileOnly)
    extendConfigurations(runtimeOnly, apiRuntimeOnly)
}

//Create sourceSets and configurations for each of the additional modules in src/$name and adds a reference to
// the corresponding data gen's resource directory excluding the cache. It also adds the api and main magitek
// module to the dependencies of the source set we are setting up, and sets up all extra source sets that are
// based on the primary added source set
for (def name : secondaryModules) {
    def sourceSet = sourceSets.create(name)
    sourceSet.resources {
        //Add the generated module resources, as well as those that might be generated by the annotation processor
        srcDirs += ["src/datagen/generated/magitek${name}"]
        //But exclude the cache of the generated data from what gets built
        exclude '.cache'
    }
    sourceSet.compileClasspath += sourceSets.api.output
    sourceSet.compileClasspath += sourceSets.main.output
    //Create all secondary sourceSets for this module
    setupExtraSourceSets(sourceSet)
}

//Setup the UPDATE_SOURCESET property in case we are doing any remappings
project.ext."UPDATE_SOURCESETS" = project.sourceSets.collect { it.name }.join(';')

def setupExtraSourceSets(SourceSet base) {
    //Expose the base module to junit
    project.sourceSets.test.compileClasspath += base.output
    project.sourceSets.test.runtimeClasspath += base.output
    //Setup and extend configurations for alternate modules. First by making the implementation, compileOnly, runtimeOnly equivalents
    // for those modules extend the main ones
    def baseImplementation = project.configurations.maybeCreate(base.getTaskName(null, "implementation"))
    def baseCompileOnly = project.configurations.maybeCreate(base.getTaskName(null, "compileOnly"))
    def baseRuntimeOnly = project.configurations.maybeCreate(base.getTaskName(null, "runtimeOnly"))
    if (base != project.sourceSets.main) {
        // If this is a secondary module then make the base tasks extend the builtin ones
        baseImplementation.extendsFrom(project.configurations.getByName("implementation"))
        baseCompileOnly.extendsFrom(project.configurations.getByName("compileOnly"))
        baseRuntimeOnly.extendsFrom(project.configurations.getByName("runtimeOnly"))
    }
    //And then setup and have all the extra sourceSets have their configurations extend the ones for the base module so that they can
    // properly access the dependency
    for (def extraType : extraTypes) {
        //Setup a source set in extraType/$name
        def extraSourceSet = setupExtraSourceSet(base, extraType)
        //And then setup the configurations for it
        project.configurations.maybeCreate(extraSourceSet.getTaskName(null, "implementation")).extendsFrom(baseImplementation)
        project.configurations.maybeCreate(extraSourceSet.getTaskName(null, "compileOnly")).extendsFrom(baseCompileOnly)
        project.configurations.maybeCreate(extraSourceSet.getTaskName(null, "runtimeOnly")).extendsFrom(baseRuntimeOnly)
    }
}

SourceSet setupExtraSourceSet(SourceSet baseSourceSet, String extra) {
    def name = baseSourceSet.getName()
    def extraSourceSet = sourceSets.create(baseSourceSet.getTaskName(extra, null))
    extraSourceSet.java.srcDirs = ["src/${extra}/${name}/java"]
    //Resources folder for if we have anything get created by our annotation processors or in the case of game tests, for any nbt presets
    extraSourceSet.resources.srcDirs = ["src/${extra}/${name}/resources"]
    extraSourceSet.compileClasspath += project.sourceSets.api.output
    extraSourceSet.compileClasspath += project.sourceSets.main.output
    if (baseSourceSet != project.sourceSets.main) {
        //If the base sourceSet is main it already is the extra source set and has a reference to the base one from before this if statement
        extraSourceSet.compileClasspath += getExtraSourceSet(project.sourceSets.main, extra).output
        extraSourceSet.compileClasspath += baseSourceSet.output
    }
    return extraSourceSet
}

static void extendConfigurations(Configuration base, Configuration... configurations) {
    for (def configuration : configurations) {
        configuration.extendsFrom(base)
    }
}

SourceSet getExtraSourceSet(String base, String name) {
    return getExtraSourceSet(project.sourceSets.getByName(base), name)
}

SourceSet getExtraSourceSet(SourceSet base, String name) {
    return project.sourceSets.getByName(base.getTaskName(name, null))
}

setupTasks(sourceSets.main)
for (def name : secondaryModules) {
    setupTasks(sourceSets.getByName(name))
}

def setupTasks(SourceSet sourceSet) {
    def output = sourceSet.name
    def compileTask = tasks.named(sourceSet.getCompileJavaTaskName(), JavaCompile)
    def replaceResourceTask = tasks.register(sourceSet.getTaskName("replace", "resources"), Copy, {
        setGroup("replace resources")
        outputs.upToDateWhen { false }
        def modsToml = copySpec {
            from(sourceSet.resources) {
                include "META-INF/mods.toml"
                expand versionProperties
            }
        }
        def packMcMeta = copySpec {
            from(sourceSet.resources) {
                include "pack.mcmeta"
                expand packProperties
            }
        }
        //Copy it into the build dir
        with(modsToml, packMcMeta)
        into "$buildDir/resources/${output}/"
        //If IntelliJ's output dir exists, copy it there as well
        def intellijPath = sourceSet == project.sourceSets.main ? "production" : output
        if (new File("$rootDir/out/${intellijPath}/resources/").exists()) {
            copy {
                with(modsToml, packMcMeta)
                into "$rootDir/out/${intellijPath}/resources/"
            }
        }
        //If Eclipse's output dir exists, copy it there as well
        if (new File("$rootDir/bin/${output}/").exists()) {
            copy {
                with(modsToml, packMcMeta)
                into "$rootDir/bin/${output}/"
            }
        }
    })
    //Set the various variables/settings for the different process resources tasks
    tasks.named(sourceSet.getProcessResourcesTaskName(), ProcessResources).configure {
        setGroup("process resources")
        duplicatesStrategy(DuplicatesStrategy.FAIL)
        exclude('META-INF/mods.toml', 'pack.mcmeta')
        from("${projectDir}") { include 'logo.png' }
        //Depend on the compile task so that we can map the computer methods as needed
        dependsOn(compileTask)
        finalizedBy(replaceResourceTask)
        doLast {
            fileTree(dir: getOutputs().getFiles().getAsPath(), includes: jsonPatterns).each {
                File file -> file.setText(JsonOutput.toJson(new JsonSlurper().parse(file)))
            }
        }
    }
    tasks.named(sourceSet.getCompileJavaTaskName(), JavaCompile).configure { setGroup("compile") }
    for (def extraType : extraTypes) {
        def extraSourceSet = getExtraSourceSet(sourceSet, extraType)
        tasks.named(extraSourceSet.getProcessResourcesTaskName(), ProcessResources).configure {
            setGroup("process resources")
            dependsOn(compileTask)
        }
        tasks.named(extraSourceSet.getCompileJavaTaskName(), JavaCompile).configure { setGroup("compile") }
    }
    //Make the various classes tasks depend on the corresponding replaceResources tasks in addition to the default processResources tasks they depend on
    tasks.named(sourceSet.getClassesTaskName()).configure { dependsOn(replaceResourceTask) }
    //Configure specific compile tasks to have the proper annotation processor info
    compileTask.configure {
        setGroup("compile")
        options.getGeneratedSourceOutputDirectory().set(file("src/datagen/${output}/"))
        options.compilerArgs.addAll([
                "-AmagitekModule=magitek${sourceSet == sourceSets.main ? "" : output}"
        ])
    }
}

group = 'magitek'
def basicVersion = "${mod_version}." + (System.getenv("BUILD_NUMBER") ?: "homebaked")
version = "${minecraft_version}-" + basicVersion
archivesBaseName = 'Magitek'

java {
    toolchain.languageVersion = JavaLanguageVersion.of("${java_version}")
    withSourcesJar()
}


minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"

    accessTransformers.from(file('src/main/resources/META-INF/accesstransformer.cfg'),
            file('src/additions/resources/META-INF/accesstransformer.cfg'))

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            setupRunConfig(it, true)
            //The below if statements are to add args to your gradle.properties file in user home
            // (DO NOT add them directly to the gradle.properties file for this project)
            // Setting the below properties allows use of your normal Minecraft account in the
            // dev environment including having your skin load. Each property also has a comment
            // explaining what information to set the value to/format it expects
            // One thing to note is because of the caching that goes on, after changing these
            // variables, you need to refresh the project and rerun genIntellijRuns/genEclipseRuns
            if (project.hasProperty('mc_uuid')) {
                //Your uuid without any dashes in the middle
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                //Your username/display name, this is the name that shows up in chat
                // Note: This is not your email, even if you have a Mojang account
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                //Your access token, you can find it in your '.minecraft/launcher_accounts.json' file
                args '--accessToken', project.getProperty('mc_accessToken')
            }
        }
        server { setupRunConfig(it, true) }
        gameTestServer { setupRunConfig(it, true, "runGameTests") }
        data {
            setupRunConfig(it, false)
            environment 'target', 'fmluserdevdata'

            args '--all', '--output', file('src/datagen/generated/'),
                    '--mod', 'magitek', '--existing', file('src/main/resources/')

            mods.named("magitek").configure { source((SourceSet) sourceSets.datagenMain) }
            for (def name : secondaryModules) {
                def modName = "magitek${name}"
                def extra = getExtraSourceSet(name, 'datagen')
                mods.named(modName).configure { source(extra) }
                args '--mod', modName, '--existing', file("src/${name}/resources/")
            }
        }
    }
}
/*
minecraft {
    mappings channel: 'official', version: '1.18.2'

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}
*/


def setupRunConfig(RunConfig runConfig, boolean supportsGameTests) {
    runConfig.workingDirectory(file("run"))
    //We aren't a multi-project config so we can disable the forced exit to allow gradle run tasks to stop gracefully
    runConfig.forceExit = false
    //This fixes Mixin application problems from other mods because their refMaps are SRG-based, but we're in a MCP env
    runConfig.property 'mixin.env.remapRefMap', 'true'
    runConfig.property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
    if (supportsGameTests) {
        //Specify all our mods as domains to look for game tests
        runConfig.property 'forge.enabledGameTestNamespaces', 'magitek'
    }

    if (project.hasProperty('forge_force_ansi')) {
        //Force ansi if declared as a gradle variable, as the auto detection doesn't detect IntelliJ properly
        // or eclipse's plugin that adds support for ansi escape in console
        runConfig.jvmArg('-Dterminal.ansi=' + project.getProperty('forge_force_ansi'))
    }

    runConfig.mods.register("magitek").configure { sources((SourceSet[]) [sourceSets.main, sourceSets.api]) }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    //TODO: Remove having to specify these as non transitive once https://github.com/McJtyMods/TheOneProbe/issues/548 is fixed
    compileOnly fg.deobf("mcjty.theoneprobe:theoneprobe:${top_version}:api") {
        transitive = false
    }
    runtimeOnly fg.deobf("mcjty.theoneprobe:theoneprobe:${top_version}") {
        transitive = false
    }
}


def getManifestAttributes(String title) {
    return [
            "Specification-Title"     : title,
            "Specification-Vendor"    : "Magitek",
            "Specification-Version"   : "${project.mod_version}",
            "Implementation-Title"    : title,
            "Implementation-Version"  : "${project.mod_version}",
            "Implementation-Vendor"   : "Magitek",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Automatic-Module-Name"   : title.toLowerCase(Locale.ROOT)
    ]
}

tasks.named('jar', Jar).configure {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    from([sourceSets.api.output, sourceSets.main.output])
    manifest.attributes(getManifestAttributes("Magitek"))
}

tasks.named('sourcesJar', Jar).configure {
    dependsOn(classes, apiClasses)
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    //Note: Already contains main source set's sources by default
    from(sourceSets.api.allJava)
    manifest.attributes(getManifestAttributes("Magitek"))
}

def secondaryJar(SourceSet sourceSet, String title) {
    return tasks.register(sourceSet.getJarTaskName(), Jar, {
        duplicatesStrategy(DuplicatesStrategy.FAIL)
        archiveClassifier.set(sourceSet.name)
        from sourceSet.output
        if (!title.isEmpty()) {
            archiveFileName.set("${title}-${project.version}.jar")
        }
        manifest.attributes(getManifestAttributes(title.isEmpty() ? "Magitek" : title))
    })
}

def apiJar = secondaryJar(sourceSets.api, '')

artifacts {
    archives apiJar
    archives jar
}

// Create Obfs for output jars
createReobf(sourceSets.api)
for (def name : secondaryModules) {
    createReobf(sourceSets.getByName(name))
}

def createReobf(SourceSet sourceSet) {
    def reobfTask = createReobf(sourceSet.getJarTaskName())
    reobfTask.configure { classpath.from(sourceSet.compileClasspath) }
    tasks.named(sourceSet.getJarTaskName()).configure(task -> task.finalizedBy(reobfTask))
    return reobfTask
}

def createReobf(String name) {
    def reobfExtension = (NamedDomainObjectContainer<RenameJarInPlace>) extensions.getByName("reobf")
    return reobfExtension.register(name)
}
afterEvaluate {
    tasks.named('jar', Jar).configure { finalizedBy(tasks.named('reobfJar', RenameJarInPlace)) }
}

clean {
    //TODO: Try to come up with a slightly better solution to this that deletes more,
    // for example make it calculate the current hash and only leave that or only do
    // this if clean build is being ran. We also ideally would have it remove some of
    // the data from our generated folder, but for now this will do given jenkins runs
    // a clean build because we need to make sure it doesn't fail
    def filteredDelete = new HashSet<>()
    for (def toDelete : getDelete()) {
        for (def f : file(toDelete).listFiles()) {
            if (f.getName() == "generated") {
                for (def generated : file(f).listFiles()) {
                    if (generated.getName() != "data" && generated.getName() != "META-INF") {
                        filteredDelete.add(generated)
                    }
                }
            } else if (f.getName() != "fg_cache") {
                filteredDelete.add(f)
            }
        }
    }
    setDelete(filteredDelete)
}

tasks.withType(JavaCompile).configureEach({
    options.encoding = 'UTF-8'
    options.compilerArgs.addAll(["-Xmaxerrs", "100000"])
})

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
